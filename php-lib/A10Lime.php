<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.7
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('A10Lime')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_A10Lime.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('A10Lime.so')) return;
    } else {
      if (!dl('A10Lime.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class A10Lime_ {
	const SW_PORTC_IO_BASE = SW_PORTC_IO_BASE;

	const SUNXI_GPIO_A = SUNXI_GPIO_A;

	const SUNXI_GPIO_B = SUNXI_GPIO_B;

	const SUNXI_GPIO_C = SUNXI_GPIO_C;

	const SUNXI_GPIO_D = SUNXI_GPIO_D;

	const SUNXI_GPIO_E = SUNXI_GPIO_E;

	const SUNXI_GPIO_F = SUNXI_GPIO_F;

	const SUNXI_GPIO_G = SUNXI_GPIO_G;

	const SUNXI_GPIO_H = SUNXI_GPIO_H;

	const SUNXI_GPIO_I = SUNXI_GPIO_I;

	const SUNXI_GPIO_A_NR = SUNXI_GPIO_A_NR;

	const SUNXI_GPIO_B_NR = SUNXI_GPIO_B_NR;

	const SUNXI_GPIO_C_NR = SUNXI_GPIO_C_NR;

	const SUNXI_GPIO_D_NR = SUNXI_GPIO_D_NR;

	const SUNXI_GPIO_E_NR = SUNXI_GPIO_E_NR;

	const SUNXI_GPIO_F_NR = SUNXI_GPIO_F_NR;

	const SUNXI_GPIO_G_NR = SUNXI_GPIO_G_NR;

	const SUNXI_GPIO_H_NR = SUNXI_GPIO_H_NR;

	const SUNXI_GPIO_I_NR = SUNXI_GPIO_I_NR;

	const SUNXI_GPIO_A_START = 0;

	const SUNXI_GPIO_B_START = SUNXI_GPIO_B_START;

	const SUNXI_GPIO_C_START = SUNXI_GPIO_C_START;

	const SUNXI_GPIO_D_START = SUNXI_GPIO_D_START;

	const SUNXI_GPIO_E_START = SUNXI_GPIO_E_START;

	const SUNXI_GPIO_F_START = SUNXI_GPIO_F_START;

	const SUNXI_GPIO_G_START = SUNXI_GPIO_G_START;

	const SUNXI_GPIO_H_START = SUNXI_GPIO_H_START;

	const SUNXI_GPIO_I_START = SUNXI_GPIO_I_START;

	const SUNXI_GPIO_INPUT = SUNXI_GPIO_INPUT;

	const SUNXI_GPIO_OUTPUT = SUNXI_GPIO_OUTPUT;

	const SUNXI_GPIO_PER = SUNXI_GPIO_PER;

	const SUNXI_PULL_NONE = SUNXI_PULL_NONE;

	const SUNXI_PULL_UP = SUNXI_PULL_UP;

	const SUNXI_PULL_DOWN = SUNXI_PULL_DOWN;

	static function sunxi_gpio_input($pin) {
		return sunxi_gpio_input($pin);
	}

	static function sunxi_gpio_init() {
		return sunxi_gpio_init();
	}

	static function sunxi_gpio_set_cfgpin($pin,$val) {
		return sunxi_gpio_set_cfgpin($pin,$val);
	}

	static function sunxi_gpio_get_cfgpin($pin) {
		return sunxi_gpio_get_cfgpin($pin);
	}

	static function sunxi_gpio_output($pin,$val) {
		return sunxi_gpio_output($pin,$val);
	}

	static function sunxi_gpio_pullup($pin,$pull) {
		return sunxi_gpio_pullup($pin,$pull);
	}

	static function SUNXI_PIO_BASE_set($SUNXI_PIO_BASE) {
		SUNXI_PIO_BASE_set($SUNXI_PIO_BASE);
	}

	static function SUNXI_PIO_BASE_get() {
		return SUNXI_PIO_BASE_get();
	}

	static function i2c_open($device,$address) {
		return i2c_open($device,$address);
	}

	static function i2c_close($fd) {
		return i2c_close($fd);
	}

	static function i2c_send($fd,$buffer,$num_bytes) {
		return i2c_send($fd,$buffer,$num_bytes);
	}

	static function i2c_read($fd,$buffer,$num_bytes) {
		return i2c_read($fd,$buffer,$num_bytes);
	}

	static function spi_open($device,$config) {
		return spi_open($device,$config);
	}

	static function spi_close($fd) {
		return spi_close($fd);
	}

	static function spi_xfer($fd,$tx_buffer,$tx_len,$rx_buffer,$rx_len) {
		return spi_xfer($fd,$tx_buffer,$tx_len,$rx_buffer,$rx_len);
	}

	static function spi_read($fd,$rx_buffer,$rx_len) {
		return spi_read($fd,$rx_buffer,$rx_len);
	}

	static function spi_write($fd,$tx_buffer,$tx_len) {
		return spi_write($fd,$tx_buffer,$tx_len);
	}
}

/* PHP Proxy Classes */
class A10Lime_sunxi_gpio {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'sunxi_gpio_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_A10Lime_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('sunxi_gpio_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'sunxi_gpio_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_A10Lime_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_sunxi_gpio') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_sunxi_gpio();
	}
}

class A10Lime_sunxi_gpio_int {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'sunxi_gpio_int_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_A10Lime_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('sunxi_gpio_int_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'sunxi_gpio_int_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_A10Lime_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_sunxi_gpio_int') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_sunxi_gpio_int();
	}
}

class A10Lime_sunxi_gpio_reg {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'sunxi_gpio_reg_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_A10Lime_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('sunxi_gpio_reg_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		if ($var === 'gpio_int') return new A10Lime_sunxi_gpio_int(sunxi_gpio_reg_gpio_int_get($this->_cPtr));
		if ($var === 'gpio_bank') return new A10Lime_sunxi_gpio(sunxi_gpio_reg_gpio_bank_get($this->_cPtr));
		if ($var === 'res') return sunxi_gpio_reg_res_get($this->_cPtr);
		if ($var === 'thisown') return swig_A10Lime_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_sunxi_gpio_reg') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_sunxi_gpio_reg();
	}
}

class A10Lime_spi_config_t {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'spi_config_t_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_A10Lime_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __isset($var) {
		if (function_exists('spi_config_t_'.$var.'_set')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __get($var) {
		$func = 'spi_config_t_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_A10Lime_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_spi_config_t') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_spi_config_t();
	}
}


?>
